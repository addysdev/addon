<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Target">

<resultMap id="targetVO" type="com.offact.addys.vo.order.TargetVO" >
  <result column="orderCode"      property="orderCode"  />
  <result column="groupId"          property="groupId"  />
  <result column="groupName"      property="groupName"  />
  <result column="companyCode"      property="companyCode"  />
  <result column="companyName"      property="companyName"  />
  <result column="faxKey"        property="faxKey"  />
  <result column="smsKey"        property="smsKey"  />
  <result column="emailKey"        property="emailKey"  />
  <result column="faxNumber"        property="faxNumber"  />
  <result column="mobilePhone"        property="mobilePhone"  />
  <result column="email"        property="email"  />
  <result column="telNumber"        property="telNumber"  />
  <result column="orderDate"        property="orderDate"  />
  <result column="deliveryDate"        property="deliveryDate"  />
  <result column="deliveryMethod"        property="deliveryMethod"  />
  <result column="deliveryEtc"        property="deliveryEtc"  />
  <result column="deliveryCharge"        property="deliveryCharge"  />
  <result column="orderCharge"        property="orderCharge"  />
  <result column="orderEtc"        property="orderEtc"  />
  <result column="orderAddress"        property="orderAddress"  />
  <result column="orderFaxNumber"        property="orderFaxNumber"  />
  <result column="orderMobilePhone"        property="orderMobilePhone"  />
  <result column="orderEmail"        property="orderEmail"  />
  <result column="orderTelNumber"        property="orderTelNumber"  />
  <result column="payMethod"        property="payMethod"  />
  <result column="buyResult"        property="buyResult"  />
  <result column="buyResultView"        property="buyResultView"  />
  <result column="orderState"        property="orderState"  />
  <result column="orderStateView"        property="orderStateView"  />
  <result column="buyDateTime"        property="buyDateTime"  />
  <result column="buyUserId"        property="buyUserId"  />
  <result column="buyUserName"        property="buyUserName"  />
  <result column="orderDateTime"     property="orderDateTime"  />
  <result column="orderUserID"          property="orderUserID"  />
  <result column="orderUserName"           property="orderUserName"  />
  <result column="deferDateTime"     property="deferDateTime"  />
  <result column="deferUserId"          property="deferUserId"  />
  <result column="deferUserName"           property="deferUserName"  />
  <result column="sms"           property="sms"  />
  <result column="memo"           property="memo"  />
  <result column="productCode"        property="productCode"  />
  <result column="productName"        property="productName"  />
  <result column="stockDate"        property="stockDate"  />
  <result column="stockCnt"        property="stockCnt"  />
  <result column="safeStock"        property="safeStock"  />
  <result column="holdStock"        property="holdStock"  />
  <result column="productPrice"        property="productPrice"  />
  <result column="vatRate"        property="vatRate"  />
  <result column="vat"        property="vat"  />
  <result column="orderCnt"        property="orderCnt"  />
  <result column="orderPrice"        property="orderPrice"  />
  <result column="safeOrderCnt"        property="safeOrderCnt"  />
  <result column="deferCheck"        property="deferCheck"  />
  <result column="addCnt"        property="addCnt"  />
  <result column="lossCnt"        property="lossCnt"  />
</resultMap>

<select id="getTargetPageList"  resultMap="targetVO" parameterType="com.offact.addys.vo.order.TargetVO" >

  Select ifnull(T1.orderCode,'X') as orderCode,
         Case T1.orderState When '01' Then '대기'
  						   When '02' Then '보류'
  						   Else ''
         				   End orderStateView,
         T1.orderState,
         T1.groupID,
         T4.groupName,
		 T2.companyCode,
         T3.companyName,
         SUM(T1.orderCnt) as orderCnt,/*안전재고 기준점 TOTAL  해당*/
	   	 SUM(T1.orderCnt*T2.productPrice) as productPrice,/*안전재고 기준점 TOTAL 해당*/
	   	 SUM(round((T1.orderCnt*T2.productPrice)*T2.vatRate)) as vat,/*안전재고 기준점 TOTAL 해당*/
         (SUM(T1.orderCnt*T2.productPrice)+SUM(round((T1.orderCnt*T2.productPrice)*T2.vatRate))) as orderPrice,/*안전재고 기준점 TOTAL 해당*/
         COUNT(T1.productCode) as safeOrderCnt,/*안전재고 기준점 발생품목수량*/
         date_format(date(T1.stockDate),'%Y-%m-%d') as stockDate  /*재고현황 기준일*/
  From (
	      Select TEMP.orderState ,
		         TEMP.stockCnt,
				 TEMP.safeStock,
                 TEMP.holdStock,
				 TEMP.groupID,
				 TEMP.productCode,
				 TEMP.orderCode,
				 (TEMP.holdStock-TEMP.stockCnt) as orderCnt,
				 TEMP.stockChk as stockDate
		      From (
					Select ifnull(I3.orderState,'01') as orderState ,
						   ifnull(I2.stockDate,'1999-01-01') as stockChk,/*재고기준일*/
						   DATE_FORMAT(ifnull(I3.orderDateTime,'1999-01-01 00:00:00'), '%Y-%m-%d') as orderChk,/*발주기준일*/
                           DATE_FORMAT(ifnull(I3.buyDateTime,'1999-01-01 00:00:00'), '%Y-%m-%d') as buyChk,/*발주완료기준일*/
						   ifnull(I2.stockCnt,0) as stockCnt, 
					       ifnull(I1.safeStock,0) as safeStock,
                           ifnull(I1.holdStock,0) as holdStock,
						   I1.groupID,
					       I1.productCode,
					       I3.orderCode
						From adStockMaster I1
							 Left Join(
										Select Max(stockDate) as stockDate,stockCnt,groupID,productCode 
                                        	From adStockDetail 
											Group by  stockCnt,groupID,productCode
									  ) As I2 On I1.productCode = I2.productCode And I1.groupID = I2.groupID 
							 Left Join(
										Select E1.orderCode ,
											   E1.productCode,
										       E2.groupID ,
										       E2.buyResult ,
										       E2.orderState ,
											   E2.buyDateTime,
                                               E2.orderDateTime
											From  adOrderDetail E1 
												  Left Join adOrder E2 On E1.orderCode=E2.orderCode And E2.deletedYn='N'
									   ) As I3 On I1.productCode = I3.productCode And I1.groupID = I3.groupID 
					     Where 1=1 
					     <if test="con_groupId != null and con_groupId != '' and con_groupId != 'G00000'" >
           					AND I1.groupId = #{con_groupId}
           				 </if>
					   ) As TEMP
		      Where TEMP.stockCnt  <![CDATA[<=]]> TEMP.safeStock
					And TEMP.stockChk <![CDATA[>]]>  TEMP.buyChk    
					<if test="con_orderState != null and con_orderState != ''" >
           				AND TEMP.orderState = #{con_orderState}
           			</if>
           			AND TEMP.orderState in ('01','02')
			  ) T1
              Left Join adProductMaster T2 On T1.ProductCode = T2.ProductCode
              Left Join adCompany T3 On T2.companyCode = T3.companyCode 
              Left Join ofGroup T4 On T1.groupID = T4.groupID 
			  Group By T1.groupID,
			           T2.companyCode
			  LIMIT ${page_limit_val1} , ${page_limit_val2}
		
</select>

<select id="getTargetCnt" resultType="int">
	SELECT count(*) AS TOT_COUNT
		From (
  			   Select T1.groupID,
                      T2.companyCode
			   	From (
	      			  Select TEMP.orderState ,
		                     TEMP.stockCnt,
				             TEMP.safeStock,
                             TEMP.holdStock,
				             TEMP.groupID,
				             TEMP.productCode
		              	From (
					          Select ifnull(I3.orderState,'01') as orderState ,
						      		 ifnull(I2.stockDate,'1999-01-01') as stockChk,/*재고기준일*/
						      		 DATE_FORMAT(ifnull(I3.orderDateTime,'1999-01-01 00:00:00'), '%Y-%m-%d') as orderChk,/*발주기준일*/
                             		 DATE_FORMAT(ifnull(I3.buyDateTime,'1999-01-01 00:00:00'), '%Y-%m-%d') as buyChk,/*발주완료기준일*/
						     		 ifnull(I2.stockCnt,0) as stockCnt, 
					         		 ifnull(I1.safeStock,0) as safeStock,
                            		 ifnull(I1.holdStock,0) as holdStock,
						    		 I1.groupID,
					        		 I1.productCode
							  	From adStockMaster I1
							 		 Left Join(
										       Select Max(stockDate) as stockDate,stockCnt,groupID,productCode 
                                        	   	From adStockDetail 
											    Group by  stockCnt,groupID,productCode
									 ) As I2 On I1.productCode = I2.productCode And I1.groupID = I2.groupID 
							 		 Left Join(
										       Select E1.orderCode ,
											   		  E1.productCode,
										      		  E2.groupID ,
										    	      E2.buyResult ,
										    	      E2.orderState ,
												      E2.buyDateTime,
                                            	      E2.orderDateTime
											   From  adOrderDetail E1 
												 	 Left Join adOrder E2 On E1.orderCode=E2.orderCode  And E2.deletedYn='N' 
									 ) As I3 On I1.productCode = I3.productCode And I1.groupID = I3.groupID 
					    		Where 1=1 
					     		<if test="con_groupId != null and con_groupId != '' and con_groupId != 'G00000'" >
           							AND I1.groupId = #{con_groupId}
           				 		</if>
					   ) As TEMP
					     Left Join adProductMaster T1 On TEMP.ProductCode = T1.ProductCode 
			  Where TEMP.stockCnt <![CDATA[<=]]>  TEMP.safeStock 
					And TEMP.stockChk <![CDATA[>]]>  TEMP.buyChk     
					<if test="con_orderState != null and con_orderState != ''" >
           				AND TEMP.orderState = #{con_orderState}
           			</if>
           			AND TEMP.orderState in ('01','02')
			  ) T1
              Left Join adProductMaster T2 On T1.ProductCode = T2.ProductCode
              Left Join adCompany T3 On T2.companyCode = T3.companyCode 
              Left Join ofGroup T4 On T1.groupID = T4.groupID 
			  Group By T1.groupID,
			           T2.companyCode
			 ) As TOT
			           
</select>

<select id="getTargetDetailList"  resultMap="targetVO" parameterType="com.offact.addys.vo.order.TargetVO" >

  Select T1.groupID,
         T4.groupName,
		 T2.companyCode,
         T3.companyName,
         T1.productCode,
         T2.productName,
         T2.vatRate,
         T1.stockDate,
	   	 T1.stockCnt,
	   	 T1.safeStock,
	   	 T1.holdStock,
	   	 T2.productPrice,
         (T1.holdStock-T1.StockCnt) as orderCnt
  From (
	      Select TEMP.orderState,
		         TEMP.stockCnt,
				 TEMP.safeStock,
                 TEMP.holdStock,
				 TEMP.groupId,
				 TEMP.productCode,
				 TEMP.stockChk As stockDate
		      From (
					Select ifnull(I3.orderState,'01') as orderState ,
						   ifnull(I2.stockDate,'1999-01-01') as stockChk,/*재고기준일*/
						   DATE_FORMAT(ifnull(I3.orderDateTime,'1999-01-01 00:00:00'), '%Y-%m-%d') as orderChk,/*발주기준일*/
                           DATE_FORMAT(ifnull(I3.buyDateTime,'1999-01-01 00:00:00'), '%Y-%m-%d') as buyChk,/*발주완료기준일*/
						   ifnull(I2.stockCnt,0) as stockCnt, 
					       ifnull(I1.safeStock,0) as safeStock,
                           ifnull(I1.holdStock,0) as holdStock,
						   I1.groupId,
					       I1.productCode
						From adStockMaster I1
							 Left Join(
										Select Max(stockDate) as stockDate,stockCnt,groupID,productCode 
                                        	From adStockDetail 
											Group by  stockCnt,groupID,productCode
									  ) As I2 On I1.productCode = I2.productCode And I1.groupID = I2.groupID 
							 Left Join(
										Select E1.orderCode ,
											   E1.productCode,
										       E2.groupId ,
										       E2.buyResult ,
										       E2.orderState ,
											   E2.buyDateTime,
                                               E2.orderDateTime
											From  adOrderDetail E1 
												  Left Join adOrder E2 On E1.orderCode=E2.orderCode 
									   ) As I3 On I1.productCode = I3.productCode And I1.groupID = I3.groupID 
					     Where 1=1 
					     	AND I1.groupId = #{con_groupId}
					   ) As TEMP
					     Left Join adProductMaster T1 On TEMP.ProductCode = T1.ProductCode 
		      Where TEMP.stockCnt  <![CDATA[<]]> TEMP.holdStock
					And TEMP.stockChk <![CDATA[>]]>  TEMP.buyChk    
                    AND TEMP.orderState = #{con_orderState}
			  ) T1
              Left Join adProductMaster T2 On T1.ProductCode = T2.ProductCode
              Left Join adCompany T3 On T2.companyCode = T3.companyCode 
              Left Join ofGroup T4 On T1.groupId = T4.groupId 
 	Where T2.companyCode =  #{con_companyCode}
 	
</select>

<insert id="deferReasonInsert"  parameterType="com.offact.addys.vo.order.TargetVO" >
		insert into adDeferReason (
				 orderCode
            	,deferType
            	,deferReason 
            	,deferDateTime
            	,deferUserId
		)values(
				 #{orderCode}
	  			, #{deferType}
	  			, #{deferReason}
	  			, now()
	  			, #{deferUserId}
		)
		                        
</insert>

<insert id="insertDefer"  parameterType="com.offact.addys.vo.order.TargetVO" >
		insert into adOrder (
				 orderCode
            	,groupId
            	,companyCode 
            	,faxKey
            	,smsKey
            	,emailKey
            	,deliveryCharge
            	,deliveryEtc
            	,mobilePhone
            	,email
            	,telNumber
            	,faxNumber
            	,orderDate
            	,deliveryDate
            	,deliveryMethod
            	,orderCharge
            	,orderEtc
            	,orderMobilePhone
            	,orderEmail
            	,orderTelNumber
            	,orderFaxNumber
            	,orderAddress
            	,payMethod
            	,sms
            	,memo
            	,deferDateTime
            	,deferUserId
            	,orderState
		)values(
				 #{orderCode}
	  			, #{con_groupId}
	  			, #{companyCode}
	  			, #{faxKey}
	  			, #{smsKey}
	  			, #{emailKey}
	  			, #{deliveryCharge}
	  			, #{deliveryEtc}
	  			, #{mobilePhone}
	  			, #{email}
	  			, #{telNumber}
	  			, #{faxNumber}
	  			, #{orderDate}
	  			, #{deliveryDate}
	  			, #{deliveryMethod}
	  			, #{orderCharge}
	  			, #{orderEtc}
	  			, #{orderMobilePhone}
	  			, #{orderEmail}
	  			, #{orderTelNumber}
	  			, #{orderFaxNumber}
	  			, #{orderAddress}
	  			, #{payMethod}
	  			, #{sms}
	  			, #{memo}
	  			, now()
	  			, #{deferUserId}
	  			, #{orderState}
	  			
		)
		ON DUPLICATE KEY UPDATE faxKey = #{faxKey}
            	                ,smsKey = #{smsKey}
            	                ,emailKey = #{emailKey}
            	                ,deliveryCharge = #{deliveryCharge}
            					,deliveryEtc = #{deliveryEtc}
            					,mobilePhone = #{mobilePhone}
            					,email = #{email}
            					,telNumber = #{telNumber}
            					,faxNumber = #{faxNumber}
            					,orderDate = #{orderDate}
            					,deliveryDate = #{deliveryDate}
            					,deliveryMethod = #{deliveryMethod}
            					,orderCharge = #{orderCharge}
            					,orderEtc = #{orderEtc}
            					,orderMobilePhone = #{orderMobilePhone}
            					,orderEmail = #{orderEmail}
            					,orderTelNumber = #{orderTelNumber}
            					,orderFaxNumber = #{orderFaxNumber}
            					,orderAddress = #{orderAddress}
            					,payMethod = #{payMethod}
            					,sms = #{sms}
            					,memo = #{memo}
            					,deferDateTime = now()
            					,deferUserId = #{deferUserId}
            					,orderState = #{orderState}
		                        
</insert>


<insert id="insertDeferDetail"  parameterType="com.offact.addys.vo.order.TargetVO" >
		insert into adOrderDetail (
				 orderCode
            	,productCode
            	,stockDate 
            	,orderCnt
            	,etc
            	,stockCnt
            	,safeStock
            	,holdStock
            	,lossCnt
            	,addCnt
            	,memo
            	,createUserId
            	,createDateTime
            	,deletedYn
            	,deferCheck
		)values(
				 #{orderCode}
	  			, #{productCode}
	  			, #{stockDate}
	  			, #{orderCnt}
	  			, #{etc}
	  			, #{stockCnt}
	  			, #{safeStock}
	  			, #{holdStock}
	  			, #{lossCnt}
	  			, #{addCnt}
	  			, #{memo}
	  			, #{createUserId}
	  			, now()
	  			, 'N'
	  			, 'N'
		)
				ON DUPLICATE KEY UPDATE stockDate = #{stockDate}
            					,orderPrice  = #{productPrice}
            					,orderResultPrice  = #{productPrice} 
            					,orderCnt  = #{orderCnt}
            					,orderResultCnt  = #{orderCnt}
            					,vatRate  = #{vatRate}
            					,orderVatRate  = #{vatRate}
            					,etc  = #{etc}
            					,stockCnt  = #{stockCnt}
            					,safeStock  = #{safeStock}
            					,holdStock  = #{holdStock}
            					,lossCnt  = #{lossCnt}
            					,addCnt  = #{addCnt}
            					,memo  = #{memo}
            					,updateUserId  = #{createUserId}
            					,updateDateTime  = now()
            					,deletedYn  = 'N'
            					,deferCheck  = 'N'
		                        
</insert>

<update id="deferDeletesProc" parameterType="com.offact.addys.vo.order.TargetVO" >
        Update adOrderDetail
       		Set
  				deferCheck = 'N'
 		Where orderCode = #{orderCode}
 		
</update>

<update id="deferUpdateProc" parameterType="java.util.Map" >
        Update adOrderDetail
       		Set
  				deferCheck = 'Y'
 		Where orderCode = #{orderCode}
 			  And productCode = #{productCode}
</update>


<insert id="insertOrder"  parameterType="com.offact.addys.vo.order.TargetVO" >
		insert into adOrder (
				 orderCode
            	,groupId
            	,companyCode 
            	,faxKey
            	,smsKey
            	,emailKey
            	,deliveryCharge
            	,deliveryEtc
            	,mobilePhone
            	,email
            	,telNumber
            	,faxNumber
            	,orderDate
            	,deliveryDate
            	,deliveryMethod
            	,orderCharge
            	,orderEtc
            	,orderMobilePhone
            	,orderEmail
            	,orderTelNumber
            	,orderFaxNumber
            	,orderAddress
            	,payMethod
            	,sms
            	,memo
            	,orderDateTime
            	,orderUserId
            	,orderState
		)values(
				 #{orderCode}
	  			, #{con_groupId}
	  			, #{companyCode}
	  			, #{faxKey}
	  			, #{smsKey}
	  			, #{emailKey}
	  			, #{deliveryCharge}
	  			, #{deliveryEtc}
	  			, #{mobilePhone}
	  			, #{email}
	  			, #{telNumber}
	  			, #{faxNumber}
	  			, #{orderDate}
	  			, #{deliveryDate}
	  			, #{deliveryMethod}
	  			, #{orderCharge}
	  			, #{orderEtc}
	  			, #{orderMobilePhone}
	  			, #{orderEmail}
	  			, #{orderTelNumber}
	  			, #{orderFaxNumber}
	  			, #{orderAddress}
	  			, #{payMethod}
	  			, #{sms}
	  			, #{memo}
	  			, now()
	  			, #{orderUserId}
	  			, #{orderState}
		)	  			
	  	ON DUPLICATE KEY UPDATE faxKey = #{faxKey}
            	                ,smsKey = #{smsKey}
            	                ,emailKey = #{emailKey}
            	                ,deliveryCharge = #{deliveryCharge}
            					,deliveryEtc = #{deliveryEtc}
            					,mobilePhone = #{mobilePhone}
            					,email = #{email}
            					,telNumber = #{telNumber}
            					,faxNumber = #{faxNumber}
            					,orderDate = #{orderDate}
            					,deliveryDate = #{deliveryDate}
            					,deliveryMethod = #{deliveryMethod}
            					,orderCharge = #{orderCharge}
            					,orderEtc = #{orderEtc}
            					,orderMobilePhone = #{orderMobilePhone}
            					,orderEmail = #{orderEmail}
            					,orderTelNumber = #{orderTelNumber}
            					,orderFaxNumber = #{orderFaxNumber}
            					,orderAddress = #{orderAddress}
            					,payMethod = #{payMethod}
            					,sms = #{sms}
            					,memo = #{memo}
            					,orderDateTime = now()
            					,orderUserId = #{orderUserId}
            					,orderState = #{orderState}
	  			

		                        
</insert>


<insert id="insertOrderDetail"  parameterType="com.offact.addys.vo.order.TargetVO" >
		insert into adOrderDetail (
				 orderCode
            	,productCode
            	,stockDate
            	,orderPrice
            	,orderResultPrice
            	,orderCnt
            	,orderResultCnt
            	,vatRate
            	,orderVatRate
            	,etc
            	,stockCnt
            	,safeStock
            	,holdStock
            	,lossCnt
            	,addCnt
            	,memo
            	,createUserId
            	,createDateTime
            	,deletedYn
            	,deferCheck
		)values(
				 #{orderCode}
	  			, #{productCode}
	  			, #{stockDate}
	  			, #{productPrice}
	  			, #{productPrice}
	  			, #{orderCnt}
	  			, #{orderCnt}
	  			, #{vatRate}
	  			, #{vatRate}
	  			, #{etc}
	  			, #{stockCnt}
	  			, #{safeStock}
	  			, #{holdStock}
	  			, #{lossCnt}
	  			, #{addCnt}
	  			, #{memo}
	  			, #{createUserId}
	  			, now()
	  			, 'N'
	  			, 'N'
		)
		ON DUPLICATE KEY UPDATE stockDate = #{stockDate}
            					,orderPrice  = #{productPrice}
            					,orderResultPrice  = #{productPrice} 
            					,orderCnt  = #{orderCnt}
            					,orderResultCnt  = #{orderCnt}
            					,vatRate  = #{vatRate}
            					,orderVatRate  = #{vatRate}
            					,etc  = #{etc}
            					,stockCnt  = #{stockCnt}
            					,safeStock  = #{safeStock}
            					,holdStock  = #{holdStock}
            					,lossCnt  = #{lossCnt}
            					,addCnt  = #{addCnt}
            					,memo  = #{memo}
            					,updateUserId  = #{createUserId}
            					,updateDateTime  = now()
            					,deletedYn  = 'N'
            					,deferCheck  = 'N'
		                        
</insert>

<select id="getDeferDetail"  resultMap="targetVO" parameterType="com.offact.addys.vo.order.TargetVO" >

  Select deliveryCharge,
         deliveryEtc,
         email,
         mobilePhone,
         telNumber,
         faxNumber,
         orderDate,
         deliveryDate,
         deliveryMethod,
         orderCharge,
         orderEtc,
         orderMobilePhone,
         orderEmail,
         orderTelNumber,
         orderFaxNumber,
         orderAddress,
         payMethod,
         sms,
         memo
  From adOrder
  Where orderCode = #{orderCode}
  
 	
</select>

<select id="getDeferDetailList"  resultMap="targetVO" parameterType="com.offact.addys.vo.order.TargetVO" >

    Select T2.groupId,
           T3.groupName,
		   T2.companyCode,
           T4.companyName,
           T1.productCode,
           T5.productName,
           T1.stockDate,
	   	   T1.stockCnt,
	   	   T1.safeStock,
	   	   T1.holdStock,
	   	   T5.productPrice,
           T5.vatRate,
           T1.orderCnt as orderCnt,
           T1.addCnt,
           T1.lossCnt,
           T1.etc,
           T1.deferCheck
  From adOrderDetail T1
       Left Join adOrder T2 On T1.orderCode=T2.orderCode
       Left Join ofGroup T3 On T2.groupId =T3.groupId
       Left Join adCompany T4 On T2.companyCode = T4.companyCode
       Left Join adProductMaster T5 On T1.productCode = T5.productCode
  Where T2.orderState='02'
        And T1.orderCode = #{orderCode}
  
 	
</select>

<update id="updateDefer"  parameterType="com.offact.addys.vo.order.TargetVO" >
		update adOrder 
			set
				orderState = #{orderState}
            	,deletedUserId = #{deletedUserId}
            	,deletedDateTime = now()
            	,deletedYn='Y'
		where orderCode = #{orderCode}
		                        
</update>

<update id="updateDeferDetail"  parameterType="com.offact.addys.vo.order.TargetVO" >
	
		update adOrderDetail 
			set
				 deletedYn = 'Y'
            	,updateUserId = #{deletedUserId}
            	,updateDateTime = now()
		where orderCode = #{orderCode}
		                        
</update>
</mapper>
